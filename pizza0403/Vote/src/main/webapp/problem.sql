--각 부서(DEPT)의 최고 급여(SAL), 최저 급여(SAL), 평균 급여(SAL), 급여 총합(SAL), 사원
--수를 구하시오.
SELECT D.DEPTNO, MAX(SAL) MAX_SALARY, MIN(SAL) MIN_SALARY,
AVG(SAL) AVG_SALARY, SUM(SAL) TOTAL_SALARY, COUNT(EMPNO) EMP_COUNT
FROM EMP E, DEPT D WHERE E.DEPTNO = D.DEPTNO GROUP BY D.DEPTNO;

--사원의 이름(ENAME)을 첫 3글자만 출력하고, 이름이 3글자 미만인 경우에는 LPAD로 3글자
--되도록 출력하시오. ENAME의 앞뒤 공백을 제거하시오.
SELECT ENAME, SUBSTR(ENAME, 1, 3) NAME_FIRST, LPAD(ENAME, 3, 'Y') NAME_LPAD_3,
RPAD(ENAME, 5, 'Y') NAME_RPAD_5, TRIM(ENAME) NAME_TRIMMED
FROM EMP;

--COMM 값이 NULL이면 0으로 대체하여 급여(SAL)와 합산하시오. COMM이 NULL이 아니면 COMM을 그대로 사용하여 급여(SAL)와 합산하시오.
SELECT ENAME, NVL(COMM, 0) + SAL SALARY_WITH_COMM, NVL2(COMM, COMM, 0) + SAL SALARY_WITH_COMM_NVL2
FROM EMP;

--ENAME과 JOB을 연결하여 하나의 문자열로 출력하시오.
SELECT ENAME || ' ' || JOB EMP_JOB
FROM EMP;

--급여(SAL)에서 소수점을 없애고, FLOOR, TRUNC, ROUND 함수를 각각 사용하여 소수점 이
--하를 어떻게 처리하는지 확인하시오.
SELECT ENAME, FLOOR(SAL) FLOOR_SAL, TRUNC(SAL) TRUNC_SAL,
ROUND(SAL) ROUND_SAL
FROM EMP;

--현재 날짜(SYSDATE)와 HIREDATE의 차이를 일수로 계산하시오. HIREDATE를 'YYYY-MM-DD' 형식으로 출력하시오. SYSDATE를 'YYYY년 MM월 DD일' 형식으로 출력하시오.
SELECT ENAME, HIREDATE, SYSDATE, SYSDATE - HIREDATE DAYS_EMPLOYEED,
TO_CHAR(HIREDATE, 'YYYY-MM-DD') HIREDATE_FORMATTED,
TO_CHAR(SYSDATE, 'YYYY-MM-DD') CURRENT_DATE_FORMATTED
FROM EMP;

--직업(JOB)이 'CLERK' 또는 'SALESMAN'인 사원을 조회하시오.
SELECT ENAME, JOB, SAL
FROM EMP
WHERE JOB IN ('CLERK', 'SALESMAN')

--급여(SAL)가 1000 이상 3000 이하인 사원만 조회하시오.
SELECT ENAME, SAL
FROM EMP
WHERE SAL BETWEEN 1000 AND 3000

--각 부서(DEPTNO)의 유니크한 직무(JOB)를 조회하시오.
SELECT DISTINCT JOB FROM EMP;

--급여(SAL)에 대해 급여순으로 순위를 매기고, 순위가 1등인 사원의 이름만 출력하시오.
SELECT * FROM ( SELECT ENAME, SAL, RANK() OVER (ORDER BY SAL DESC) SALARY_RANK FROM EMP ) WHERE ROWNUM = 1;

--SAL 값에 따라 급여 등급을 매기고, 급여가 2500 이상이면 'High', 그렇지 않으면
--'Low'로 출력하시오.
SELECT ENAME, SAL, CASE WHEN SAL >= 2500 THEN 'High' ELSE 'Low' END SALARY_GRADE
FROM EMP;

--각 부서(DEPTNO)별로 평균 급여(SAL)가 2000 이상인 부서만 출력하시오.
SELECT DEPTNO, AVG(SAL) AVG_SALARY
FROM EMP
GROUP BY DEPTNO HAVING AVG(SAL) >= 2000;

--일자별 매출 통계 조회 쿼리
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM-DD') 매출일자, COUNT(SALE_ID) 판매건수,
SUM(QTY) 총수량, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) 총매출
FROM SALES
GROUP BY TO_CHAR(SALE_DATE, 'YYYY-MM-DD')
ORDER BY TO_CHAR(SALE_DATE, 'YYYY-MM-DD')

--월별 매출 통계 조회 쿼리
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM') 매출월, COUNT(SALE_ID) 판매건수, 
SUM(QTY) 총수량, TO_CHAR(SUM(TOTAL_AMOUNT), '99,999') 총매출 FROM SALES
GROUP BY TO_CHAR(SALE_DATE, 'YYYY-MM')

--매출 기준 상위 5개 메뉴 (TOP 5)
SELECT * FROM (SELECT MENU_NAME, SUM(QTY) 총판매수량, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), '999,999')) 총매출
FROM SALES S, MENU M
WHERE S.MENU_ID = M.MENU_ID
GROUP BY MENU_NAME
ORDER BY SUM(TOTAL_AMOUNT) DESC) WHERE ROWNUM <= 5

--요일별 매출 통계
SELECT TO_CHAR(SALE_DATE, 'DAY') 요일,
SUM(QTY) 총판매수량, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), '999,999')) 총매출 FROM SALES S, MENU M
WHERE S.MENU_ID = M.MENU_ID
GROUP BY TO_CHAR(SALE_DATE, 'DAY')
ORDER BY 총판매수량 DESC

--하루 중 가장 매출이 높았던 날(Top 1)
SELECT * FROM (
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM-DD') 매출일, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), '999,999')) 총매출 FROM SALES S, MENU M
WHERE S.MENU_ID = M.MENU_ID GROUP BY  TO_CHAR(SALE_DATE, 'YYYY-MM-DD') ORDER BY 총매출 DESC
) WHERE ROWNUM = 1;

--전월 대비 매출 증감률 (전체 기준)
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM') 매출월, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), '999,999')) 월매출,
ROUND(
	(SUM(TOTAL_AMOUNT) - LAG(SUM(TOTAL_AMOUNT)) OVER(ORDER BY SUM(TOTAL_AMOUNT)))
		/ LAG(SUM(TOTAL_AMOUNT)) OVER(ORDER BY SUM(TOTAL_AMOUNT)) * 100, 2) 증감률_퍼센트
FROM SALES S, MENU M WHERE S.MENU_ID = M.MENU_ID GROUP BY TO_CHAR(SALE_DATE, 'YYYY-MM')

--월별 TOP 1 메뉴 (가장 매출이 높은 메뉴)
SELECT 매출월, 메뉴명, 총매출 FROM (
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM') 매출월, MENU_NAME 메뉴명, SUM(TOTAL_AMOUNT) 총매출,
RANK() OVER (PARTITION BY TO_CHAR(SALE_DATE, 'YYYY-MM') ORDER BY SUM(TOTAL_AMOUNT) DESC) RANK_MENU
FROM SALES S, MENU M
WHERE S.MENU_ID = M.MENU_ID
GROUP BY TO_CHAR(SALE_DATE, 'YYYY-MM'), MENU_NAME
) WHERE RANK_MENU = 1;

--재방문 고객 분석 쿼리 (2회 이상 방문자)
SELECT C.CUST_ID, COUNT(SALE_ID) 방문횟수, NAME, TO_CHAR(MIN(SALE_DATE), 'YYYY-MM-DD') 첫방문일, TO_CHAR(MAX(SALE_DATE), 'YYYY-MM-DD') 마지막방문일
FROM SALES S, CUSTOMER C
WHERE S.CUST_ID = C.CUST_ID
GROUP BY C.CUST_ID, NAME HAVING COUNT(SALE_ID) >= 2
ORDER BY 방문횟수 DESC

--[4월] 메뉴별 판매수량 순서
SELECT MENU_NAME, COUNT(SALE_ID)
FROM SALES S, MENU M
WHERE S.MENU_ID = M.MENU_ID
GROUP BY MENU_NAME -- AND TO_CHAR(SALE_DATE, 'MM') = '04'
--GROUP BY MENU_NAME, SALE_DATE