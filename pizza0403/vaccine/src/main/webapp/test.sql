-- 각 부서(DEPT)의 최고 급여(SAL), 최저 급여(SAL), 평균 급여(SAL), 급여 총합(SAL), 사원
--수를 구하시오.
SELECT DEPTNO, MAX(sal) MAX_SALARY, MIN(sal) MIN_SALARY, AVG(SAL) AVG_SALARY,
SUM(sal) TOTAL_SALARY, COUNT(sal) EMP_COUNT from EMP group by deptno

--사원의 이름(ENAME)을 첫 3글자만 출력하고, 이름이 3글자 미만인 경우에는 LPAD로 3글자
--되도록 출력하시오. ENAME의 앞뒤 공백을 제거하시오.

select ENAME, SUBSTR(ENAME, 1, 3) NAME_FIRST_3,
LPAD(ENAME, 3, 'X') NAME_LPAD_3, RPAD(ENAME, 5, 'Y') NAME_RPAD_5,
TRIM(ENAME) NAME_TRIMMED
FROM EMP;

--COMM 값이 NULL이면 0으로 대체하여 급여(SAL)와 합산하시오. 
--COMM이 NULL이 아니면 COMM을 그대로 사용하여 급여(SAL)와 합산하시오.
SELECT ENAME, NVL(COMM, 0) + SAL SALARY_WITH_COMM,
NVL2(COMM, COMM, 0) + SAL SALARY_WITH_COMM_NVL2
from EMP;

--ENAME과 JOB을 연결하여 하나의 문자열로 출력하시오.
SELECT ENAME || ' ' || JOB EMP_JOB FROM EMP;

--급여(SAL)에서 소수점을 없애고, FLOOR, TRUNC, ROUND 함수를 각각 사용하여 소수점 이
--하를 어떻게 처리하는지 확인하시오.
SELECT ENAME, FLOOR(SAL) FLOOR_SAL, TRUNC(SAL) TRUNC_SAL, ROUND(SAL) ROUND_SAL
FROM EMP;

--현재 날짜(SYSDATE)와 HIREDATE의 차이를 일수로 계산하시오.
--HIREDATE를 'YYYY-MM-DD' 형식으로 출력하시오.
--SYSDATE를 'YYYY년 MM월 DD일' 형식으로 출력하시오.

SELECT ENAME, HIREDATE, SYSDATE, SYSDATE - HIREDATE DAYS_EMPLOYED,
TO_CHAR(HIREDATE, 'YYYY-MM-DD') HIREDATE_FORMATTED,
TO_CHAR(SYSDATE, 'YYYY"년"MM"월"DD"일"') SYSDATE_FORMATTED
FROM EMP;

-- 직업(JOB)이 'CLERK' 또는 'SALESMAN'인 사원을 조회하시오.
SELECT ENAME, JOB, SAL
FROM EMP
WHERE JOB in ('CLERK', 'SALESMAN')

--급여(SAL)가 1000 이상 3000 이하인 사원만 조회하시오.
SELECT ENAME, SAL
FROM EMP
WHERE SAL BETWEEN 1000 and 3000;

--각 부서(DEPTNO)의 유니크한 직무(JOB)를 조회하시오.
SELECT DISTINCT JOB FROM EMP

--급여(SAL)에 대해 급여순으로 순위를 매기고, 순위가 1등인 사원의 이름만 출력하시오.
SELECT * FROM (SELECT ENAME, SAL, RANK () OVER (ORDER BY SAL DESC) SALARY_RANK
FROM EMP) where rownum = 1

--SAL 값에 따라 급여 등급을 매기고, 급여가 2500 이상이면 'High', 그렇지 않으면
--'Low'로 출력하시오.
SELECT ENAME, SAL, case when SAL >= 2500 then 'High' else 'Low' end SALARY_GRADE
FROM EMP;

--각 부서(DEPTNO)별로 평균 급여(SAL)가 2000 이상인 부서만 출력하시오.
SELECT DEPTNO, AVG(SAL) FROM EMP GROUP BY DEPTNO HAVING AVG(SAL) >= 2000

--일자별 매출 통계 조회 쿼리
SELECT SALE_DATE 매출일자, COUNT(SALE_ID) 판매건수, SUM(QTY) 판매수량,
TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) 총매출
FROM SALES
GROUP BY SALE_DATE

--월별 매출 통계 조회 쿼리
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM') 매출월,
COUNT(SALE_ID) 판매건수,
SUM(QTY) 판매수량,
TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) 총매출
FROM SALES
GROUP BY TO_CHAR(SALE_DATE, 'YYYY-MM');

--매출 기준 상위 5개 메뉴 (TOP 5)
SELECT * FROM (
SELECT MENU_NAME, SUM(QTY) 총판매수량, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) 총매출
FROM SALES S, MENU M WHERE S.MENU_ID = M.MENU_ID GROUP BY MENU_NAME ORDER BY SUM(TOTAL_AMOUNT) DESC
) WHERE ROWNUM <= 5

--요일별 매출 통계
SELECT TO_CHAR(SALE_DATE, 'DAY') 요일, SUM(QTY) 총판매수량, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) 총매출
FROM SALES GROUP BY  TO_CHAR(SALE_DATE, 'DAY') ORDER BY SUM(TOTAL_AMOUNT) DESC

--하루 중 가장 매출이 높았던 날(Top 1)
SELECT * FROM (
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM-DD') 매출일, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) 총매출 
FROM SALES GROUP BY SALE_DATE ORDER BY SUM(TOTAL_AMOUNT) DESC) WHERE ROWNUM = 1

--전월 대비 매출 증감률 (전체 기준)
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM') 매출월, SUM(TOTAL_AMOUNT) 월매출,
ROUND((SUM(TOTAL_AMOUNT) - LAG(SUM(TOTAL_AMOUNT), 1) OVER (ORDER BY SUM(TOTAL_AMOUNT))) / LAG(SUM(TOTAL_AMOUNT), 1) OVER (ORDER BY SUM(TOTAL_AMOUNT)) * 100, 2)  증감률_퍼센트
FROM SALES
GROUP BY TO_CHAR(SALE_DATE, 'YYYY-MM')

--월별 TOP 1 메뉴 (가장 매출이 높은 메뉴)
SELECT 매출월, 메뉴명, 총매출 FROM (
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM') 매출월,
MENU_NAME 메뉴명, SUM(TOTAL_AMOUNT) 총매출,
RANK() OVER (PARTITION BY TO_CHAR(SALE_DATE, 'YYYY-MM') ORDER BY SUM(TOTAL_AMOUNT) DESC) MENU_RANK
FROM SALES S, MENU M
WHERE S.MENU_ID = M.MENU_ID
GROUP BY TO_CHAR(SALE_DATE, 'YYYY-MM'), MENU_NAME) WHERE MENU_RANK = 1;

--재방문 고객 분석 쿼리 (2회 이상 방문자)
SELECT C.CUST_ID, NAME 고객명, COUNT(C.CUST_ID) 누적방문수, TO_CHAR(MAX(SALE_DATE), 'YYYY-MM-DD') 최근방문일
FROM CUSTOMER C, SALES S
WHERE C.CUST_ID = S.CUST_ID
GROUP BY C.CUST_ID, NAME
HAVING COUNT(C.CUST_ID) >= 2
ORDER BY 누적방문수 DESC;

--고객 유형별 매출 비중(회원VS비회원)
SELECT '비회원' 고객유형, COUNT(CUST_ID) 주문건수, NVL(SUM(TOTAL_AMOUNT), 0) 총매출 FROM SALES WHERE CUST_ID IS NULL
UNION
SELECT '회원' 고객유형, COUNT(CUST_ID) 주문건수, NVL(SUM(TOTAL_AMOUNT), 0) 총매출 FROM SALES WHERE CUST_ID IS NOT NULL;

--최초 구매 후 재구매까지 평균 소요일
SELECT AVG(CALC_DATE) FROM (SELECT CUST_ID, TO_DATE(MAX(SALE_DATE)) - TO_DATE(MIN(SALE_DATE)) CALC_DATE FROM (SELECT CUST_ID, SALE_DATE, RANK FROM (
SELECT C.CUST_ID, SALE_DATE, RANK() OVER (PARTITION BY C.CUST_ID ORDER BY SALE_DATE) AS RANK
FROM SALES S, CUSTOMER C
WHERE S.CUST_ID = C.CUST_ID
) WHERE CUST_ID in (SELECT CUST_ID FROM SALES GROUP BY CUST_ID HAVING COUNT(CUST_ID) >= 2 AND RANK <= 2)
) GROUP BY CUST_ID);

--사원의 이름과 부서번호(DEPTNO)를 조회하되, 중복 없이 출력하세요.
SELECT distinct ENAME, DEPTNO FROM EMP;

--급여에 10% 인상된 결과를 함께 조회하세요 (ENAME, SAL, 인상된 급여).
SELECT ENAME, TO_CHAR(SAL, '9,999'), TO_CHAR(SAL * 1.1, '9,999') RAISED_SAL FROM EMP;

--급여와 커미션의 합계를 TOTAL로 출력하세요. (NULL은 0으로 치환)
SELECT ENAME, TO_CHAR(SAL, '9,999') SAL, NVL(COMM, 0) COMM, SAL + NVL(COMM, 0) TOTAL FROM EMP;

--커미션을 받지 않는 사원들의 사번과 사원정보(직무(JOB),이름), 고용일(HIREDATE)를
--출력하세요. (정렬은 직무와 고용일의 오름차순)
SELECT EMPNO, JOB || '_' || ENAME EMP_INFO, TO_CHAR(HIREDATE,'YYYY-MM-DD') FROM EMP WHERE COMM IS NULL
ORDER BY JOB, HIREDATE

--이름의 두번째 글자가 'A'인 사원들의 이름을 조회하세요.
SELECT ENAME FROM EMP WHERE ENAME LIKE '_A%'

--1981년에 입사한 사원들의 이름과 입사일을 조회하세요.
SELECT ENAME, TO_CHAR(HIREDATE, 'YYYY') FROM EMP WHERE TO_CHAR(HIREDATE, 'YYYY') = '1981';

--직무별 사원 수를 구하세요.(사원수가 3이상인 직무만 출력하고 인원수의 내림차순, 직무의 오름차순으로 정렬)
SELECT JOB, COUNT(EMPNO) CNT FROM EMP GROUP BY JOB HAVING COUNT(EMPNO) >= 3 ORDER BY CNT DESC, JOB ASC;

--KING과 같은 부서에 속한 사원들을 조회하세요.
SELECT ENAME, DEPTNO FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'KING');

--가장 최근에 입사한 사원을 조회하세요.
SELECT EMPNO, ENAME, JOB, MGR, SAL, COMM FROM EMP WHERE HIREDATE = (SELECT MAX(HIREDATE) FROM EMP)

--사원의 이름과 그 사원의 관리자 이름, 그리고 관리자 직무를 조회하세요.
SELECT E1.ENAME, E2.ENAME, E2.JOB FROM EMP E1, EMP E2 WHERE E1.MGR = E2.EMPNO(+)