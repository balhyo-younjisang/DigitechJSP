CREATE TABLE MENU (
    MENU_ID    NUMBER(5) PRIMARY KEY,
    MENU_NAME  VARCHAR2(50) NOT NULL,
    PRICE      NUMBER(7, 2) NOT NULL,
    CATEGORY   VARCHAR2(30),
    STATUS     VARCHAR2(1) DEFAULT 'Y' CHECK (STATUS IN ('Y', 'N'))
);

INSERT INTO MENU VALUES (1, '아메리카노', 3000, '커피', 'Y');
INSERT INTO MENU VALUES (2, '카페라떼', 3500, '커피', 'Y');
INSERT INTO MENU VALUES (3, '카푸치노', 3500, '커피', 'Y');
INSERT INTO MENU VALUES (4, '녹차라떼', 4000, '음료', 'Y');
INSERT INTO MENU VALUES (5, '치즈케이크', 4500, '디저트', 'Y');
INSERT INTO MENU VALUES (6, '초코머핀', 2500, '디저트', 'Y');



CREATE TABLE SALES (
    SALE_ID       NUMBER(10) PRIMARY KEY,
    MENU_ID       NUMBER(5) NOT NULL,
    QTY           NUMBER(4) NOT NULL,
    SALE_DATE     DATE DEFAULT SYSDATE,
    TOTAL_AMOUNT  NUMBER(10, 2),
    CUST_ID  NUMBER,
    CONSTRAINT FK_MENU_SALES FOREIGN KEY (MENU_ID) REFERENCES MENU (MENU_ID),
    CONSTRAINT FK_SALES_CUSTOMER FOREIGN KEY (CUST_ID) REFERENCES CUSTOMER(CUST_ID)

);

-- SALE_ID, MENU_ID, QTY, SALE_DATE, TOTAL_AMOUNT
/*INSERT INTO SALES VALUES (1001, 1, 2, TO_DATE('2025-04-01', 'YYYY-MM-DD'), 6000);
INSERT INTO SALES VALUES (1002, 2, 1, TO_DATE('2025-04-01', 'YYYY-MM-DD'), 3500);
INSERT INTO SALES VALUES (1003, 5, 1, TO_DATE('2025-04-01', 'YYYY-MM-DD'), 4500);
INSERT INTO SALES VALUES (1004, 1, 1, TO_DATE('2025-04-02', 'YYYY-MM-DD'), 3000);
INSERT INTO SALES VALUES (1005, 4, 2, TO_DATE('2025-04-02', 'YYYY-MM-DD'), 8000);
INSERT INTO SALES VALUES (1006, 3, 2, TO_DATE('2025-03-28', 'YYYY-MM-DD'), 7000);
INSERT INTO SALES VALUES (1007, 6, 3, TO_DATE('2025-03-30', 'YYYY-MM-DD'), 7500);
INSERT INTO SALES VALUES (1008, 2, 1, TO_DATE('2025-03-30', 'YYYY-MM-DD'), 3500); 
*/

INSERT INTO SALES VALUES (2001, 1, 1, TO_DATE('2025-03-10'), 3000, 1);
INSERT INTO SALES VALUES (2002, 2, 2, TO_DATE('2025-03-15'), 7000, 1);
INSERT INTO SALES VALUES (2003, 3, 1, TO_DATE('2025-03-05'), 3500, 2);
INSERT INTO SALES VALUES (2004, 5, 1, TO_DATE('2025-03-12'), 4500, 3);
INSERT INTO SALES VALUES (2005, 1, 1, TO_DATE('2025-03-18'), 3000, 3);
INSERT INTO SALES VALUES (2006, 6, 1, TO_DATE('2025-03-20'), 2500, 3);
INSERT INTO SALES VALUES (2007, 4, 1, TO_DATE('2025-03-22'), 4000, 4);
INSERT INTO SALES VALUES (2008, 2, 1, TO_DATE('2025-04-02'), 3500, 1);
INSERT INTO SALES VALUES (2009, 1, 1, TO_DATE('2025-04-03'), 3000, 3);
INSERT INTO SALES VALUES (2010, 6, 2, TO_DATE('2025-04-15'), 5000, 3);
INSERT INTO SALES VALUES (2011, 3, 1, TO_DATE('2025-04-10'), 3500, 4);
INSERT INTO SALES VALUES (2012, 4, 1, TO_DATE('2025-04-05'), 4000, 5);
INSERT INTO SALES VALUES (2013, 5, 2, TO_DATE('2025-04-08'), 9000, 6);
select * from sales;
CREATE TABLE CUSTOMER (
    CUST_ID   NUMBER PRIMARY KEY,
    NAME      VARCHAR2(50),
    PHONE     VARCHAR2(20),
    REG_DATE  DATE
);

INSERT INTO CUSTOMER VALUES (1, '홍길동', '010-1111-2222', TO_DATE('2025-03-01', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER VALUES (2, '김민지', '010-2222-3333', TO_DATE('2025-03-05', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER VALUES (3, '이철수', '010-3333-4444', TO_DATE('2025-03-10', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER VALUES (4, '박영희', '010-4444-5555', TO_DATE('2025-03-15', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER VALUES (5, '최유리', '010-5555-6666', TO_DATE('2025-04-05', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER VALUES (6, '장도윤', '010-6666-7777', TO_DATE('2025-05-08', 'YYYY-MM-DD'));

--일자별 매출 통계 조회 쿼리
select TO_CHAR(TO_DATE(sale_date), 'YYYY-MM-DD') 매출일자,
count(sale_id) 판매건수, QTY 총수량, TRIM(TO_CHAR(TOTAL_AMOUNT, 'L9,999')) 총매출 FROM sales group by sale_date, qty, total_amount
order by sale_date;

--월별 매출 통계 조회 쿼리
SELECT 
  TO_CHAR(TO_DATE(sale_date), 'YYYY-MM') AS 매출월,
  COUNT(sale_id) AS 판매건수,
  SUM(QTY) AS 총수량,
  TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) AS 총매출
FROM sales
GROUP BY TO_CHAR(TO_DATE(sale_date), 'YYYY-MM')
ORDER BY 매출일자;

--매출 기준 상위 5개 메뉴 (TOP 5)
SELECT * FROM (SELECT MENU_NAME, SUM(QTY) AS 총판매수량, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) AS 총매출
FROM MENU, SALES WHERE MENU.MENU_ID = SALES.MENU_ID
GROUP BY MENU_NAME
ORDER BY SUM(TOTAL_AMOUNT) DESC) WHERE ROWNUM <= 5

--4. 요일별 매출 통계
SELECT 
  TO_CHAR(TO_DATE(sale_date), 'day') AS 요일,
  COUNT(sale_id) AS 총판매수량,
  TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) AS 총매출
FROM sales
GROUP BY TO_CHAR(TO_DATE(sale_date), 'day')
ORDER BY SUM(TOTAL_AMOUNT) DESC;

--5. 하루 중 가장 매출이 높았던 날(Top 1)
SELECT TO_CHAR(SALE_DATE, 'YYYY-MM-DD') 매출일, TRIM(TO_CHAR(TOTAL_AMOUNT, 'L9,999')) 총매출
FROM (
	SELECT * FROM SALES ORDER BY TOTAL_AMOUNT DESC
) WHERE ROWNUM <= 1

--전월 대비 매출 증감률 (전체 기준)
SELECT 월, 월매출, ROUND(((월매출 - 전월매출) / NULLIF(전월매출, 0)) * 100, 2) AS 증감률_퍼센트
FROM (
	SELECT 
	  TO_CHAR(TO_DATE(sale_date), 'YYYY-MM') AS 월,
	  SUM(TOTAL_AMOUNT) AS 월매출,
	  LAG(SUM(TOTAL_AMOUNT)) OVER(ORDER BY TO_CHAR(TO_DATE(sale_date), 'YYYY-MM')) AS 전월매출
	FROM sales
	GROUP BY TO_CHAR(TO_DATE(sale_date), 'YYYY-MM')
)

--7. 월별 TOP 1 메뉴 (가장 매출이 높은 메뉴)

SELECT 매출월, 메뉴명, 총매출 FROM (SELECT 
	TO_CHAR(TO_DATE(sale_date), 'YYYY-MM') AS 매출월, 
	SUM(QTY) over(PARTITION BY TO_CHAR(TO_DATE(sale_date), 'YYYY-MM'), MENU_NAME) AS 판매량,
	MENU_NAME AS 메뉴명,
	SUM(TOTAL_AMOUNT) OVER (PARTITION BY TO_CHAR(TO_DATE(sale_date), 'YYYY-MM'), MENU_NAME) AS 총매출,
 	DENSE_RANK() OVER (PARTITION BY TO_CHAR(TO_DATE(sale_date), 'YYYY-MM') ORDER BY TOTAL_AMOUNT DESC) RANK
FROM SALES, MENU WHERE SALES.MENU_ID = MENU.MENU_ID ORDER BY 매출월 ASC, 총매출 DESC) WHERE RANK = 1

--재방문 고객 분석 쿼리 (2회 이상 방문자)
SELECT * FROM (
SELECT CUSTOMER.CUST_ID, NAME 고객명, COUNT(*) 방문횟수, MIN(TO_CHAR(TO_DATE(sale_date), 'YYYY-MM')) 첫방문일, MAX(TO_CHAR(TO_DATE(sale_date), 'YYYY-MM')) 마지막방문일 FROM CUSTOMER, SALES WHERE CUSTOMER.CUST_ID = SALES.CUST_ID GROUP BY CUSTOMER.CUST_ID, NAME
) WHERE 방문횟수 >= 2 ORDER BY CUST_ID

--[4월] 메뉴별 판매수량 순서
SELECT MENU_NAME, 총판매수량 as 판매수량 FROM (SELECT TO_CHAR(SALE_DATE, 'month') as 월, MENU_NAME, SUM(QTY) AS 총판매수량, TRIM(TO_CHAR(SUM(TOTAL_AMOUNT), 'L999,999,999')) AS 총매출
FROM MENU, SALES WHERE MENU.MENU_ID = SALES.MENU_ID
GROUP BY TO_CHAR(SALE_DATE, 'month'), MENU_NAME
ORDER BY SUM(TOTAL_AMOUNT) DESC) where 월 like '%4%'

--10. 4월 신규(처음으로) 방문 고객만 조회
SELECT CUST_ID, NAME, 첫방문일 FROM (
	SELECT CUSTOMER.CUST_ID, NAME, MIN(TO_CHAR(TO_DATE(sale_date), 'YYYY-MM-DD')) 첫방문일 FROM CUSTOMER, SALES
	WHERE CUSTOMER.CUST_ID = SALES.CUST_ID GROUP BY CUSTOMER.CUST_ID, NAME
) WHERE 첫방문일 like '%4%'

--재방문 고객 + 총 누적 방문수
SELECT * FROM (
SELECT CUSTOMER.CUST_ID, NAME 고객명, COUNT(*) 방문횟수 FROM CUSTOMER, SALES WHERE CUSTOMER.CUST_ID = SALES.CUST_ID GROUP BY CUSTOMER.CUST_ID, NAME
) WHERE 방문횟수 >= 2 ORDER BY 방문횟수 DESC;

--고객 유형별 매출 비중(회원VS비회원)
SELECT '회원' as 고객유형, count(SALES.CUST_ID) AS 주문건수, sum(TOTAL_AMOUNT) AS 총매출 FROM SALES, CUSTOMER WHERE SALES.CUST_ID = CUSTOMER.CUST_ID and SALES.CUST_ID is not null
union
SELECT '비회원' as 고객유형, count(SALES.CUST_ID) AS 주문건수, NVL(sum(TOTAL_AMOUNT), 0) AS 총매출 FROM SALES, CUSTOMER WHERE SALES.CUST_ID = CUSTOMER.CUST_ID and SALES.CUST_ID is null;

--최초 구매 후 재구매까지 평균 소요일
select cust_id, sale_date, rank() over (partition by cust_id order by sale_date) from sales s