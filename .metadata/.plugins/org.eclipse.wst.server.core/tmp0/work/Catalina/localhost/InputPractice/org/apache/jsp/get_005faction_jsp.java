/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2025-03-28 05:22:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import demo0327.DBConnection;
import java.sql.Connection;

public final class get_005faction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/./component/header.jsp", Long.valueOf(1743137851884L));
    _jspx_dependants.put("/./component/footer.jsp", Long.valueOf(1743136092630L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("demo0327.DBConnection");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

Connection conn = DBConnection.getConnection();
String sql_member = "SELECT TO_CHAR(no, '00000') as no, id, pass, name, birth, gender, dept, d_fg FROM TBL_EMP_202304 WHERE no = ?";
PreparedStatement pstmt = conn.prepareStatement(sql_member);
pstmt.setString(1, request.getParameter("no"));
ResultSet rs = pstmt.executeQuery();

String no = "", id = "", pass = "", name = "", birth = "", gender = "", dept = "", d_fg = "";
if (rs.next()) {
	no = rs.getString("no");
	id = rs.getString("id");
	pass = rs.getString("pass");
	name = rs.getString("name");
	birth = rs.getString("birth");
	gender = rs.getString("gender");
	dept = rs.getString("dept");
	d_fg = rs.getString("d_fg");
}

if(no.equals("")) {
	request.setAttribute("message", "사용자를 찾을 수 없습니다.");
	request.getRequestDispatcher("get.jsp").forward(request, response);
}

rs.close();
pstmt.close();

String sql_dept = "SELECT d_code, d_name FROM TBL_DEPT_202304";
pstmt = conn.prepareStatement(sql_dept);
rs = pstmt.executeQuery();

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/style.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"index.jsp\">시맨틱 웹 페이지</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<nav>\r\n");
      out.write("		<ul class=\"gnb\">\r\n");
      out.write("			<li><a href=\"#\">홈</a></li>\r\n");
      out.write("			<li><a href=\"index.jsp\">등록</a></li>\r\n");
      out.write("			<li><a href=\"get.jsp\">수정</a></li>\r\n");
      out.write("			<li><a href=\"list.jsp\">조회</a></li>\r\n");
      out.write("		</ul>\r\n");
      out.write("	</nav>\r\n");
      out.write("</header>");
      out.write("\r\n");
      out.write("	<main>\r\n");
      out.write("		<h2>수정</h2>\r\n");
      out.write("		<form onsubmit=\"return handleSubmit()\" action=\"edit_action.jsp\"\r\n");
      out.write("			method=\"post\">\r\n");
      out.write("			<table border=\"1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>사번</td>\r\n");
      out.write("					<td><input type=\"text\" readonly=\"readonly\" value=");
      out.print(no);
      out.write("\r\n");
      out.write("						name=\"no\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>아이디</td>\r\n");
      out.write("					<td><input type=\"text\" value=");
      out.print(id);
      out.write(" name=\"id\"> 예)\r\n");
      out.write("						s1234</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>비밀번호</td>\r\n");
      out.write("					<td><input type=\"password\" value=");
      out.print(pass);
      out.write(" name=\"pass\">\r\n");
      out.write("						예) ****</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>사원명</td>\r\n");
      out.write("					<td><input type=\"text\" value=");
      out.print(name);
      out.write(" name=\"name\"> 예)\r\n");
      out.write("						홍길동</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>생년월일</td>\r\n");
      out.write("					<td><input type=\"date\" value=");
      out.print(birth);
      out.write(" name=\"birth\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>성별</td>\r\n");
      out.write("					<td><input type=\"radio\" value=\"0\" name=\"gender\"\r\n");
      out.write("						");
if (gender.equals("0")) {
      out.write(" checked ");
}
      out.write(">남 <input\r\n");
      out.write("						type=\"radio\" value=\"1\" name=\"gender\" ");
if (gender.equals("1")) {
      out.write("\r\n");
      out.write("						checked ");
}
      out.write(">여</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>소속</td>\r\n");
      out.write("					<td><select name=\"dept\">\r\n");
      out.write("							");

							while (rs.next()) {
							
      out.write("\r\n");
      out.write("							<option value=");
      out.print(rs.getString("d_code"));
      out.write("\r\n");
      out.write("								");
if (rs.getString("d_code").equals(dept)) {
      out.write(" selected ");
}
      out.write('>');
      out.print(rs.getString("d_name"));
      out.write("</option>\r\n");
      out.write("							");

							}
							
      out.write("\r\n");
      out.write("					</select></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>장애여부</td>\r\n");
      out.write("					<td><input type=\"checkbox\" name=\"d_fg\"\r\n");
      out.write("						");
if (d_fg.equals("0")) {
      out.write(" checked ");
}
      out.write("> 해당없음 체크</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" style=\"text-align: center;\">\r\n");
      out.write("						<button type=\"submit\">수정</button>\r\n");
      out.write("						<button type=\"button\" onclick=\"reset()\">다시쓰기</button>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</main>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("<footer> © 2025. SDHS. All rights reserved.© </footer>");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("	function handleSubmit() {\r\n");
      out.write("		const no = document.getElementsByName(\"no\")[0].value;\r\n");
      out.write("		const id = document.getElementsByName(\"id\")[0].value;\r\n");
      out.write("		const pass = document.getElementsByName(\"pass\")[0].value;\r\n");
      out.write("		const name = document.getElementsByName(\"name\")[0].value;\r\n");
      out.write("		const birth = document.getElementsByName(\"birth\")[0].value;\r\n");
      out.write("		const gender = document.getElementsByName(\"gender\")[0].value;\r\n");
      out.write("		const dept = document.getElementsByName(\"dept\")[0].value;\r\n");
      out.write("\r\n");
      out.write("		if (!no) {\r\n");
      out.write("			alert(\"사번은 입력되어야 합니다.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if (!id) {\r\n");
      out.write("			alert(\"아이디를 입력해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if (!pass) {\r\n");
      out.write("			alert(\"비밀번호를 입력해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if (!name) {\r\n");
      out.write("			alert(\"이름을 입력해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if (!birth) {\r\n");
      out.write("			alert(\"생년월일을 입력해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if (!gender) {\r\n");
      out.write("			alert(\"성별을 입력해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if (!dept) {\r\n");
      out.write("			alert(\"소속을 입력해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		return true;\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");

DBConnection.close(rs, pstmt, conn);

      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
